@page "/login"
@using EVRental.BlazorWebApp.QuanNH.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject EVRental.BlazorWebApp.QuanNH.GraphQLClients.GraphQLConsumers _graphQLConsumers
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<div class="login-container">
    <div class="login-card card-modern">
        <div class="login-header">
            <div class="logo-section">
                <i class="bi bi-lightning-charge-fill"></i>
            </div>
            <h2 class="text-white mb-2">Welcome Back</h2>
            <p class="text-white-50">Sign in to EV Rental Management System</p>
        </div>

        <div class="login-body">
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    @ErrorMessage
                    <button type="button" class="btn-close" @onclick="() => ErrorMessage = null"></button>
                </div>
            }

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                
                <div class="form-floating mb-3">
                    <InputText id="userName" 
                               class="form-control" 
                               @bind-Value="loginModel.UserName" 
                               placeholder="Username"
                               disabled="@IsLoading" />
                    <label for="userName">
                        <i class="bi bi-person me-2"></i>Username
                    </label>
                    <ValidationMessage For="@(() => loginModel.UserName)" />
                </div>

                <div class="form-floating mb-4">
                    <InputText id="password" 
                               type="password" 
                               class="form-control" 
                               @bind-Value="loginModel.Password" 
                               placeholder="Password"
                               disabled="@IsLoading" />
                    <label for="password">
                        <i class="bi bi-lock me-2"></i>Password
                    </label>
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <div class="d-grid">
                    <button type="submit" 
                            class="btn btn-gradient-primary btn-lg" 
                            disabled="@IsLoading">
                        @if (IsLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <text>Signing in...</text>
                        }
                        else
                        {
                            <i class="bi bi-box-arrow-in-right me-2"></i>
                            <text>Sign In</text>
                        }
                    </button>
                </div>
            </EditForm>
        </div>

        <div class="login-footer">
            <p class="text-muted small mb-0">
                <i class="bi bi-shield-check me-1"></i>
                Secure Login with Cookie Authentication
            </p>
        </div>
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
    }

    .login-card {
        width: 100%;
        max-width: 450px;
        border: none;
        overflow: hidden;
    }

    .login-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 3rem 2rem;
        text-align: center;
        border-radius: 20px 20px 0 0;
    }

    .logo-section {
        width: 80px;
        height: 80px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 1.5rem;
        backdrop-filter: blur(10px);
    }

    .logo-section i {
        font-size: 2.5rem;
        color: white;
    }

    .login-body {
        padding: 2.5rem;
        background: white;
    }

    .login-footer {
        padding: 1.5rem 2.5rem;
        background: #f8f9fa;
        text-align: center;
        border-radius: 0 0 20px 20px;
    }

    .form-floating > label {
        color: #6c757d;
    }

    .form-floating > .form-control:focus ~ label,
    .form-floating > .form-control:not(:placeholder-shown) ~ label {
        color: #667eea;
    }

    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }
</style>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? ErrorMessage { get; set; }
    private bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already logged in
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/CheckOutQuanNhs/CheckOutQuanNhList");
        }
    }

    private async Task HandleLogin()
    {
        IsLoading = true;
        ErrorMessage = null;

        try
        {
            var user = await _graphQLConsumers.Login(loginModel.UserName, loginModel.Password);

            if (user != null && user.UserAccountId > 0)
            {
                // Mark user as authenticated
                var customAuthProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                await customAuthProvider.MarkUserAsAuthenticated(user);

                // Navigate to check out list
                Navigation.NavigateTo("/CheckOutQuanNhs/CheckOutQuanNhList", forceLoad: true);
            }
            else
            {
                ErrorMessage = "Invalid username or password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Login failed: {ex.Message}";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }

    public class LoginModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Username is required")]
        public string UserName { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}
