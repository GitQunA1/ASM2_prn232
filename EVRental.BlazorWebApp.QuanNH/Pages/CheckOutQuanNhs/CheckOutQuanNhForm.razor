@page "/CheckOutQuanNhs/CheckOutQuanNhForm"
@using EVRental.BlazorWebApp.QuanNH.Models
@using System.ComponentModel.DataAnnotations
@inject EVRental.BlazorWebApp.QuanNH.GraphQLClients.GraphQLConsumers _graphQLConsumers
@inject NavigationManager Navigation

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card-modern">
                <div class="card-header" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 20px 20px 0 0 !important; padding: 1.5rem;">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3 class="mb-0 text-white">
                            <i class="bi bi-plus-circle me-2"></i>
                            Create New Check Out
                        </h3>
                        <button class="btn btn-modern" style="background: white; color: var(--primary-gradient-start);" @onclick="Cancel">
                            <i class="bi bi-arrow-left me-1"></i>Back
                        </button>
                    </div>
                </div>
                <div class="card-body p-4">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            @ErrorMessage
                            <button type="button" class="btn-close" @onclick="() => ErrorMessage = null"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(SuccessMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="bi bi-check-circle me-2"></i>
                            @SuccessMessage
                            <button type="button" class="btn-close" @onclick="() => SuccessMessage = null"></button>
                        </div>
                    }

                    <EditForm Model="@Model" OnValidSubmit="HandleSubmit" class="form-modern">
                        <DataAnnotationsValidator />
                        
                        <div class="row g-4">
                            <!-- Date & Time Section -->
                            <div class="col-12">
                                <div class="detail-section">
                                    <h5>
                                        <i class="bi bi-calendar-date me-2"></i>Date & Time Information
                                    </h5>
                                    <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-clock me-1"></i>Check Out Time
                                </label>
                                <InputDate @bind-Value="Model.CheckOutTime" Type="InputDateType.DateTimeLocal" class="form-control" />
                                <ValidationMessage For="@(() => Model.CheckOutTime)" class="text-danger small" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-calendar-check me-1"></i>Return Date
                                </label>
                                <InputDate @bind-Value="Model.ReturnDate" class="form-control" />
                                <ValidationMessage For="@(() => Model.ReturnDate)" class="text-danger small" />
                            </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Payment & Condition Section -->
                            <div class="col-12">
                                <div class="detail-section">
                                    <h5>
                                        <i class="bi bi-credit-card me-2"></i>Payment & Return Details
                                    </h5>
                                    <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-credit-card me-1"></i>Payment Method
                                </label>
                                <InputSelect @bind-Value="Model.PaymentMethod" class="form-select">
                                    <option value="">-- Select Payment Method --</option>
                                    <option value="Cash">Cash</option>
                                    <option value="Credit Card">Credit Card</option>
                                    <option value="Debit Card">Debit Card</option>
                                    <option value="Bank Transfer">Bank Transfer</option>
                                    <option value="E-Wallet">E-Wallet</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => Model.PaymentMethod)" class="text-danger small" />
                            </div>

                            <!-- Return Condition -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-tools me-1"></i>Return Condition
                                </label>
                                @if (ReturnConditions == null)
                                {
                                    <div class="form-control">
                                        <span class="spinner-border spinner-border-sm me-2"></span>Loading...
                                    </div>
                                }
                                else
                                {
                                    <InputSelect @bind-Value="Model.ReturnConditionId" class="form-select">
                                        <option value="">-- Select Return Condition --</option>
                                        @foreach (var condition in ReturnConditions)
                                        {
                                            <option value="@condition.ReturnConditionId">
                                                @condition.Name 
                                                @if(condition.SeverityLevel.HasValue)
                                                {
                                                    <text> (Level: @condition.SeverityLevel)</text>
                                                }
                                            </option>
                                        }
                                    </InputSelect>
                                }
                                <ValidationMessage For="@(() => Model.ReturnConditionId)" class="text-danger small" />
                            </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Financial Information -->
                            <div class="col-12">
                                <div class="detail-section">
                                    <h5>
                                        <i class="bi bi-cash-stack me-2"></i>Financial Information
                                    </h5>
                                    <div class="row g-3">
                            <div class="col-md-4">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-cash me-1"></i>Extra Cost
                                </label>
                                <InputNumber @bind-Value="Model.ExtraCost" @bind-Value:after="CalculateTotalCost" class="form-control" placeholder="0.00" />
                                <ValidationMessage For="@(() => Model.ExtraCost)" class="text-danger small" />
                            </div>

                            <!-- Late Fee -->
                            <div class="col-md-4">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-exclamation-triangle me-1"></i>Late Fee
                                </label>
                                <InputNumber @bind-Value="Model.LateFee" @bind-Value:after="CalculateTotalCost" class="form-control" placeholder="0.00" />
                                <ValidationMessage For="@(() => Model.LateFee)" class="text-danger small" />
                            </div>

                            <!-- Total Cost -->
                            <div class="col-md-4">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-cash-stack me-1"></i>Total Cost
                                </label>
                                <InputNumber @bind-Value="Model.TotalCost" class="form-control" placeholder="0.00" />
                                <ValidationMessage For="@(() => Model.TotalCost)" class="text-danger small" />
                            </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Status Information -->
                            <div class="col-12">
                                <div class="detail-section">
                                    <h5>
                                        <i class="bi bi-toggle2-on me-2"></i>Status Information
                                    </h5>
                                    <div class="row g-3">
                            <div class="col-md-6">
                                <div class="form-check form-switch form-check-modern mb-3">
                                    <InputCheckbox @bind-Value="Model.IsPaid" class="form-check-input" id="isPaid" />
                                    <label class="form-check-label" for="isPaid">
                                        <i class="bi bi-check-circle me-1"></i>Is Paid
                                    </label>
                                </div>
                                <div class="form-check form-switch form-check-modern">
                                    <InputCheckbox @bind-Value="Model.IsDamageReported" class="form-check-input" id="isDamageReported" />
                                    <label class="form-check-label" for="isDamageReported">
                                        <i class="bi bi-exclamation-circle me-1"></i>Is Damage Reported
                                    </label>
                                </div>
                            </div>
                                        <div class="col-md-6">
                                            <!-- Empty for layout balance -->
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Signatures Section -->
                            <div class="col-12">
                                <div class="detail-section">
                                    <h5>
                                        <i class="bi bi-pen me-2"></i>Signatures
                                    </h5>
                                    <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-pen me-1"></i>Customer Signature
                                </label>
                                <InputText @bind-Value="Model.CustomerSignature" class="form-control" placeholder="Enter customer signature" />
                                <ValidationMessage For="@(() => Model.CustomerSignature)" class="text-danger small" />
                            </div>

                            <!-- Staff Signature -->
                            <div class="col-md-6">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-person-badge me-1"></i>Staff Signature
                                </label>
                                <InputText @bind-Value="Model.StaffSignature" class="form-control" placeholder="Enter staff signature" />
                                <ValidationMessage For="@(() => Model.StaffSignature)" class="text-danger small" />
                            </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Notes & Feedback Section -->
                            <div class="col-12">
                                <div class="detail-section">
                                    <h5>
                                        <i class="bi bi-journal-text me-2"></i>Notes & Feedback
                                    </h5>
                                    <div class="row g-3">
                            <div class="col-12">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-journal-text me-1"></i>Notes
                                </label>
                                <InputTextArea @bind-Value="Model.Notes" class="form-control" rows="3" placeholder="Enter any additional notes..." />
                                <ValidationMessage For="@(() => Model.Notes)" class="text-danger small" />
                            </div>

                            <!-- Customer Feedback -->
                            <div class="col-12">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-chat-left-quote me-1"></i>Customer Feedback
                                </label>
                                <InputTextArea @bind-Value="Model.CustomerFeedback" class="form-control" rows="3" placeholder="Enter customer feedback..." />
                                <ValidationMessage For="@(() => Model.CustomerFeedback)" class="text-danger small" />
                            </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Form Actions -->
                        <div class="d-flex justify-content-end gap-3 mt-4">
                            <button type="button" class="btn btn-modern btn-secondary" @onclick="Cancel">
                                <i class="bi bi-x-circle me-1"></i>Cancel
                            </button>
                            <button type="submit" class="btn btn-modern btn-gradient-primary" disabled="@IsSubmitting">
                                @if (IsSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <text>Creating...</text>
                                }
                                else
                                {
                                    <i class="bi bi-check-circle me-1"></i>
                                    <text>Create Check Out</text>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private CheckOutQuanNhViewModel Model { get; set; } = new();
    private List<ReturnCondition>? ReturnConditions { get; set; }
    private bool IsSubmitting { get; set; } = false;
    private string? ErrorMessage { get; set; }
    private string? SuccessMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load Return Conditions from GraphQL
            ReturnConditions = await _graphQLConsumers.GetReturnConditions();
            
            // Initialize default values
            Model.CheckOutTime = DateTime.Now;
            Model.IsPaid = false;
            Model.IsDamageReported = false;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading data: {ex.Message}";
            ReturnConditions = new List<ReturnCondition>();
        }
    }

    private void CalculateTotalCost()
    {
        Model.TotalCost = (Model.ExtraCost ?? 0) + (Model.LateFee ?? 0);
    }

    private async Task HandleSubmit()
    {
        IsSubmitting = true;
        ErrorMessage = null;
        SuccessMessage = null;

        try
        {
            Console.WriteLine("=== Starting Create CheckOut ===");
            Console.WriteLine($"CheckOutTime: {Model.CheckOutTime}");
            Console.WriteLine($"IsPaid: {Model.IsPaid}");
            Console.WriteLine($"IsDamageReported: {Model.IsDamageReported}");
            Console.WriteLine($"Notes: {Model.Notes}");
            
            // Convert ViewModel to Entity
            var entity = Model.ToCheckOutQuanNh();
            
            var result = await _graphQLConsumers.CreateCheckOutQuanNh(entity);
            
            Console.WriteLine($"Result ID: {result}");
            
            if (result > 0)
            {
                SuccessMessage = "Check out created successfully!";
                await Task.Delay(1500); // Show success message briefly
                Navigation.NavigateTo("/CheckOutQuanNhs/CheckOutQuanNhList");
            }
            else
            {
                ErrorMessage = "Failed to create check out. Please check all required fields.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"=== ERROR ===");
            Console.WriteLine($"Message: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
            Console.WriteLine($"InnerException: {ex.InnerException?.Message}");
            ErrorMessage = $"Error: {ex.Message}";
            if (ex.InnerException != null)
            {
                ErrorMessage += $" | Inner: {ex.InnerException.Message}";
            }
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/CheckOutQuanNhs/CheckOutQuanNhList");
    }
}
