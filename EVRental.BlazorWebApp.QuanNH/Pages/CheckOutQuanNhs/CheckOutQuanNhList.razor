@page "/CheckOutQuanNhs/CheckOutQuanNhList"
@using EVRental.BlazorWebApp.QuanNH.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject EVRental.BlazorWebApp.QuanNH.GraphQLClients.GraphQLConsumers _graphQLConsumers;
@inject NavigationManager Navigation

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            @* Header *@
            <div class="card-modern header-card-gradient mb-4">
                <div class="card-body py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h4 class="text-white mb-1">
                                <i class="bi bi-clipboard-check me-2"></i>Check Out Management
                            </h4>
                            <p class="text-white-50 mb-0 small">View and manage all check out records</p>
                        </div>
                        <a href="/CheckOutQuanNhs/CheckOutQuanNhForm" class="btn btn-modern" style="background: white; color: var(--primary-gradient-start);">
                            <i class="bi bi-plus-circle me-1"></i>Create New
                        </a>
                    </div>
                </div>
            </div>

            @* Search Panel *@
            <div class="card-modern mb-4">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label small fw-bold">
                                <i class="bi bi-file-text me-1"></i>Note
                            </label>
                            <input type="text" 
                                   class="form-control" 
                                   placeholder="Search by note..." 
                                   @bind="SearchNote"
                                   @bind:event="oninput" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small fw-bold">
                                <i class="bi bi-currency-dollar me-1"></i>Cost
                            </label>
                            <input type="number" 
                                   class="form-control" 
                                   placeholder="Search by cost..." 
                                   @bind="SearchCost"
                                   @bind:event="oninput"
                                   step="0.01" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small fw-bold">
                                <i class="bi bi-tag me-1"></i>Return Condition Name
                            </label>
                            <input type="text" 
                                   class="form-control" 
                                   placeholder="Search by return condition..." 
                                   @bind="SearchName"
                                   @bind:event="oninput" />
                        </div>
                        <div class="col-md-3 d-flex align-items-end gap-2">
                            <button class="btn btn-gradient-primary flex-fill" @onclick="SearchData">
                                <i class="bi bi-search me-1"></i>Search
                            </button>
                            <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                <i class="bi bi-arrow-clockwise"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            @* Loading State *@
            @if (IsLoading)
            {
                <div class="card-modern">
                    <div class="card-body text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3 text-muted">Loading data...</p>
                    </div>
                </div>
            }
            @* Empty State *@
            else if (CheckOutQuanNhs == null || !CheckOutQuanNhs.Any())
            {
                <div class="card-modern empty-state">
                    <div class="card-body text-center py-5">
                        <i class="bi bi-inbox display-4 text-muted"></i>
                        <h5 class="mt-3 text-muted">No records found</h5>
                        <p class="text-muted">
                            @if (HasSearchCriteria)
                            {
                                <span>Try adjusting your search criteria</span>
                            }
                            else
                            {
                                <span>Click "Create New" to add your first record</span>
                            }
                        </p>
                    </div>
                </div>
            }
            @* Data Table *@
            else
            {
                @* Stats Cards *@
                <div class="row g-3 mb-4">
                    <div class="col-md-4">
                        <div class="card-modern stat-card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="stat-icon-wrapper bg-primary bg-opacity-10 ms-2">
                                        <i class="bi bi-file-text text-primary"></i>
                                    </div>
                                    <div>
                                        <h6 class="text-muted mb-0 small">Total Records</h6>
                                        <h4 class="mb-0">@TotalItems</h4>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card-modern stat-card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="stat-icon-wrapper bg-success bg-opacity-10 ms-2">
                                        <i class="bi bi-check-circle text-success"></i>
                                    </div>
                                    <div>
                                        <h6 class="text-muted mb-0 small">Paid</h6>
                                        <h4 class="mb-0">@CheckOutQuanNhs.Count(x => x.IsPaid)</h4>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card-modern stat-card">
                            <div class="card-body">
                                <div class="d-flex align-items-center">
                                    <div class="stat-icon-wrapper bg-warning bg-opacity-10 ms-2">
                                        <i class="bi bi-clock text-warning"></i>
                                    </div>
                                    <div>
                                        <h6 class="text-muted mb-0 small">Unpaid</h6>
                                        <h4 class="mb-0">@CheckOutQuanNhs.Count(x => !x.IsPaid)</h4>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @* Data Table *@
                <div class="card-modern table-modern">
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover align-middle mb-0">
                                <thead>
                                    <tr>
                                        <th class="px-3">ID</th>
                                        <th>Check Out Time</th>
                                        <th>Return Date</th>
                                        <th>Payment Method</th>
                                        <th>Customer</th>
                                        <th>Staff</th>
                                        <th class="text-end">Extra Cost</th>
                                        <th class="text-end">Late Fee</th>
                                        <th class="text-end">Total Cost</th>
                                        <th class="text-center">Payment</th>
                                        <th class="text-center">Damage</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(var item in CheckOutQuanNhs)
                                    {
                                        <tr>
                                            <td class="px-3">
                                                <span class="badge badge-modern badge-gradient-primary">#@item.CheckOutQuanNhid</span>
                                            </td>
                                            <td>
                                                @if(item.CheckOutTime.HasValue)
                                                {
                                                    <div>@item.CheckOutTime.Value.ToString("dd/MM/yyyy")</div>
                                                    <small class="text-muted">@item.CheckOutTime.Value.ToString("HH:mm")</small>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if(item.ReturnDate.HasValue)
                                                {
                                                    <span>@item.ReturnDate.Value.ToString("dd/MM/yyyy")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if(!string.IsNullOrEmpty(item.PaymentMethod))
                                                {
                                                    <span class="badge badge-modern" style="background: #6c757d;">@item.PaymentMethod</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if(!string.IsNullOrEmpty(item.CustomerSignature))
                                                {
                                                    <span>@item.CustomerSignature</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if(!string.IsNullOrEmpty(item.StaffSignature))
                                                {
                                                    <span>@item.StaffSignature</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td class="text-end">
                                                @if(item.ExtraCost.HasValue)
                                                {
                                                    <span>@item.ExtraCost.Value.ToString("C")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">$0.00</span>
                                                }
                                            </td>
                                            <td class="text-end">
                                                @if(item.LateFee.HasValue)
                                                {
                                                    <span class="text-danger">@item.LateFee.Value.ToString("C")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">$0.00</span>
                                                }
                                            </td>
                                            <td class="text-end">
                                                @if(item.TotalCost.HasValue)
                                                {
                                                    <strong class="text-success">@item.TotalCost.Value.ToString("C")</strong>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">$0.00</span>
                                                }
                                            </td>
                                            <td class="text-center">
                                                @if(item.IsPaid)
                                                {
                                                    <span class="badge badge-modern badge-gradient-success pulse-animation">
                                                        <i class="bi bi-check-circle"></i> Paid
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge badge-modern badge-gradient-warning pulse-animation">
                                                        <i class="bi bi-clock"></i> Unpaid
                                                    </span>
                                                }
                                            </td>
                                            <td class="text-center">
                                                @if(item.IsDamageReported)
                                                {
                                                    <span class="badge badge-modern badge-gradient-danger">
                                                        <i class="bi bi-exclamation-triangle"></i> Yes
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge badge-modern badge-gradient-success">
                                                        <i class="bi bi-check"></i> No
                                                    </span>
                                                }
                                            </td>
                                            <td class="text-center">
                                                <div class="d-flex justify-content-center gap-1">
                                                    <a href="/CheckOutQuanNhs/Detail/@item.CheckOutQuanNhid"
                                                       class="btn btn-sm btn-gradient-primary"
                                                       title="View">
                                                        <i class="bi bi-eye"></i>
                                                    </a>
                                                    <a href="/CheckOutQuanNhs/Edit/@item.CheckOutQuanNhid"
                                                       class="btn btn-sm btn-gradient-warning"
                                                       title="Edit">
                                                        <i class="bi bi-pencil"></i>
                                                    </a>
                                                    <a href="/CheckOutQuanNhs/Delete/@item.CheckOutQuanNhid"
                                                       class="btn btn-sm btn-gradient-danger"
                                                       title="Delete">
                                                        <i class="bi bi-trash"></i>
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="card-footer bg-light">
                        <div class="row align-items-center">
                            <div class="col-md-4 mb-2 mb-md-0">
                                <span class="text-muted small">
                                    <i class="bi bi-info-circle me-1"></i>
                                    Showing @((CurrentPage - 1) * PageSize + 1) to @Math.Min(CurrentPage * PageSize, TotalItems) of @TotalItems record(s)
                                </span>
                            </div>
                            <div class="col-md-4 mb-2 mb-md-0 text-center">
                                <nav aria-label="Page navigation">
                                    <ul class="pagination pagination-sm pagination-modern justify-content-center mb-0">
                                        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(CurrentPage == 1)">
                                                <i class="bi bi-chevron-double-left"></i>
                                            </button>
                                        </li>
                                        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">
                                                <i class="bi bi-chevron-left"></i>
                                            </button>
                                        </li>
                                        
                                        @for (int i = Math.Max(1, CurrentPage - 2); i <= Math.Min(TotalPages, CurrentPage + 2); i++)
                                        {
                                            var pageNumber = i;
                                            <li class="page-item @(CurrentPage == pageNumber ? "active" : "")">
                                                <button class="page-link" @onclick="() => GoToPage(pageNumber)">
                                                    @pageNumber
                                                </button>
                                            </li>
                                        }
                                        
                                        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">
                                                <i class="bi bi-chevron-right"></i>
                                            </button>
                                        </li>
                                        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(TotalPages)" disabled="@(CurrentPage == TotalPages)">
                                                <i class="bi bi-chevron-double-right"></i>
                                            </button>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                            <div class="col-md-4 text-md-end">
                                <div class="d-inline-flex align-items-center gap-2">
                                    <label class="small text-muted mb-0">Items per page:</label>
                                    <select class="form-select form-select-sm" style="width: auto;" @onchange="ChangePageSize" value="@PageSize">
                                        <option value="5">5</option>
                                        <option value="10">10</option>
                                        <option value="20">20</option>
                                        <option value="50">50</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<CheckOutQuanNh>? CheckOutQuanNhs;
    private bool IsLoading = false;
    
    // Pagination
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages { get; set; } = 1;
    private int TotalItems { get; set; } = 0;

    // Search fields
    private string? SearchNote { get; set; }
    private decimal? SearchCost { get; set; }
    private string? SearchName { get; set; }

    private bool HasSearchCriteria => 
        !string.IsNullOrWhiteSpace(SearchNote) || 
        SearchCost.HasValue || 
        !string.IsNullOrWhiteSpace(SearchName);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            Console.WriteLine($"LoadData called with: Note='{SearchNote}', Cost={SearchCost}, Name='{SearchName}', Page={CurrentPage}, Size={PageSize}");

            var result = await _graphQLConsumers.SearchWithPagination(
                SearchNote,
                SearchCost,
                SearchName,
                CurrentPage,
                PageSize
            );

            if (result != null)
            {
                CheckOutQuanNhs = result.Items ?? new List<CheckOutQuanNh>();
                TotalItems = result.TotalItems;
                TotalPages = result.TotalPages > 0 ? result.TotalPages : 1;
                CurrentPage = result.CurrentPage;

                Console.WriteLine($"LoadData success: Found {TotalItems} items, {TotalPages} pages");
            }
            else
            {
                Console.WriteLine("LoadData: result is null");
                CheckOutQuanNhs = new List<CheckOutQuanNh>();
                TotalItems = 0;
                TotalPages = 1;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading check outs: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
            }
            
            CheckOutQuanNhs = new List<CheckOutQuanNh>();
            TotalItems = 0;
            TotalPages = 1;
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchData()
    {
        CurrentPage = 1; // Reset to first page when searching
        await LoadData();
    }

    private async Task ClearSearch()
    {
        SearchNote = null;
        SearchCost = null;
        SearchName = null;
        CurrentPage = 1;
        await LoadData();
    }

    private async Task GoToPage(int page)
    {
        if (page < 1 || page > TotalPages) return;
        CurrentPage = page;
        await LoadData();
    }

    private async Task ChangePageSize(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newSize))
        {
            PageSize = newSize;
            CurrentPage = 1;
            await LoadData();
        }
    }
}
